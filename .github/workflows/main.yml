name: VLESS-Ngrok-Final-Log-Read-Fix

on:
  workflow_dispatch:

jobs:
  secure-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Generate Random Password & Set Root
        id: passwd
        run: |
          PASS=$(openssl rand -base64 12)
          echo "root:$PASS" | sudo chpasswd
          echo "PASSWORD=$PASS" >> $GITHUB_ENV
          echo "🔑 Generated random root password"

      - name: Install Dependencies & Configure UFW
        run: |
          sudo apt update -y
          sudo apt install -y openssh-server ufw curl wget jq unzip
          sudo ufw allow 22/tcp
          sudo ufw allow 443/tcp
          sudo ufw --force enable
          sudo service ssh restart
          echo "✅ Dependencies & security configured"

      - name: Install Xray Manually & Service
        run: |
          XRAY_VERSION=$(curl -s "https://api.github.com/repos/XTLS/Xray-core/releases/latest" | jq -r '.tag_name')
          XRAY_FILENAME="Xray-linux-64.zip"
          XRAY_DOWNLOAD_URL="https://github.com/XTLS/Xray-core/releases/download/$XRAY_VERSION/$XRAY_FILENAME"
          
          echo "🔽 Downloading Xray $XRAY_VERSION"
          wget -q $XRAY_DOWNLOAD_URL
          sudo unzip -o $XRAY_FILENAME -d /usr/local/bin/
          
          sudo mkdir -p /usr/local/etc/xray/
          sudo mkdir -p /etc/xray/
          
          cat <<EOF | sudo tee /etc/systemd/system/xray.service
[Unit]
Description=Xray Service
After=network.target nss-lookup.target

[Service]
User=root
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
NoNewPrivileges=true
ExecStart=/usr/local/bin/xray run -config /usr/local/etc/xray/config.json
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

          echo "✅ Xray installed and service configured."

      - name: Configure Xray VLESS
        run: |
          cat <<EOF | sudo tee /usr/local/etc/xray/config.json
{
  "log": { "loglevel": "warning" },
  "inbounds": [
    {
      "port": 443,
      "protocol": "vless",
      "settings": {
        "clients": [
          {
            "id": "79e26e20-56b3-4f1e-8484-9844e13d11b2",
            "level": 0,
            "email": "user@example.com"
          }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "ws",
        "security": "tls",
        "tlsSettings": {
          "alpn": ["http/1.1"],
          "allowInsecure": true,
          "fingerprint": "random"
        },
        "wsSettings": { "path": "/vless-archfx" }
      }
    }
  ],
  "outbounds": [
    { "protocol": "freedom", "settings": {} }
  ]
}
EOF

          sudo systemctl daemon-reload
          sudo systemctl restart xray
          echo "✅ Xray VLESS configured and running on port 443."

      - name: Install and Configure Ngrok Manually (Logging to file)
        run: |
          wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
          unzip ngrok-stable-linux-amd64.zip
          ./ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

          # تشغيل ngrok في الخلفية مع تسجيل الخروج
          nohup ./ngrok tcp 443 --region us --log=stdout > ngrok.log 2>&1 &
          echo "Waiting 45 seconds for Ngrok tunnel to start..."
          sleep 45

          echo "==== Ngrok Log Output ===="
          cat ngrok.log
          echo "=========================="

      - name: Get Ngrok Tunnel Address (Reading from log file)
        id: ngrok_info
        run: |
          NGROK_URL=$(grep -Eo 'tcp://[0-9a-zA-Z\.\-:]*' ngrok.log | tail -n 1)

          if [ -z "$NGROK_URL" ]; then
            VLESS_ADDR="Tunnel-Failed-Check-Logs"
          else
            VLESS_ADDR=${NGROK_URL#tcp://}
          fi

          echo "VLESS_ADDR=$VLESS_ADDR" >> $GITHUB_ENV
          echo "🔥 Ngrok Address: $VLESS_ADDR"

      - name: Save Credentials and Tunnel Info
        run: |
          echo "VLESS Address: $VLESS_ADDR" > vps-info.txt
          echo "VLESS Port: 443" >> vps-info.txt
          echo "User: root, Pass: $PASSWORD" >> vps-info.txt

      - name: Upload VPS Info
        uses: actions/upload-artifact@v4
        with:
          name: vps-info
          path: vps-info.txt

      - name: Keep VPS Alive
        run: |
          while true; do
            echo "[$(date)] VPS running..."
            sleep 300
          done
